Old dockerfiles can be seen from previous exercises

front-before: 1.01 GB

back-before: 1.17 GB

For backend:
1. removed all files that are not serve
Not small enough
2. Switched huge go:1.16 to go:alpine
Not small enough
3. made multi-stage build and now it passes 3.6 size 23.7 MB huge success!

New Dockerfile:

## 3.2 user added for exercise


FROM golang:alpine AS builder

WORKDIR /usr/src/app

COPY . .

RUN go build && \
rm -rf cache && rm -rf common && rm -rf controller && rm -rf pgconnection && rm -rf router && rm -rf app.go && rm -rf app_test.go && rm -rf go.mod && rm -rf go.sum && \
adduser -D appuser 

USER appuser

EXPOSE 8080

ENV REQUEST_ORIGIN=http://localhost:5000

ENV REDIS_HOST=redis

FROM alpine

COPY --from=builder /usr/src/app/server /usr/src/app/server

RUN adduser -D appuser

USER appuser

CMD ["usr/src/app/server"]







For frontend:

1 Combined run statements
2. Switched to node:14-alpine
3. Made multi-stage build where build is built separately.
New size is 124 MB

New Dockerfile:

## 3.2 user added for exercise

FROM node:14-alpine AS builder

WORKDIR /usr/src/app

COPY . .

RUN npm install && REACT_APP_BACKEND_URL=http://localhost/api npm run build

FROM node:14-alpine

WORKDIR usr/src/app

RUN npm install -g serve

COPY --from=builder /usr/src/app/build /usr/src/app/build

RUN adduser -D appuser

USER appuser

EXPOSE 5000

ENV PORT = 5000

CMD ["serve", "-s", "-l", "5000", "build"]